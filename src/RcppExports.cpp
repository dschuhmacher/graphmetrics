// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// crossdist2
NumericMatrix crossdist2(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _graphmetrics_crossdist2(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist2(x, y));
    return rcpp_result_gen;
END_RCPP
}
// crossdist
NumericMatrix crossdist(NumericMatrix x, NumericMatrix y);
RcppExport SEXP _graphmetrics_crossdist(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(crossdist(x, y));
    return rcpp_result_gen;
END_RCPP
}
// edgedist
NumericVector edgedist(NumericVector e, NumericVector f, double maxedist, bool bound, bool edge_weighted);
RcppExport SEXP _graphmetrics_edgedist(SEXP eSEXP, SEXP fSEXP, SEXP maxedistSEXP, SEXP boundSEXP, SEXP edge_weightedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type e(eSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type maxedist(maxedistSEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< bool >::type edge_weighted(edge_weightedSEXP);
    rcpp_result_gen = Rcpp::wrap(edgedist(e, f, maxedist, bound, edge_weighted));
    return rcpp_result_gen;
END_RCPP
}
// edgedist1
double edgedist1(double& e, double& f, double maxedist, bool bound);
RcppExport SEXP _graphmetrics_edgedist1(SEXP eSEXP, SEXP fSEXP, SEXP maxedistSEXP, SEXP boundSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double& >::type e(eSEXP);
    Rcpp::traits::input_parameter< double& >::type f(fSEXP);
    Rcpp::traits::input_parameter< double >::type maxedist(maxedistSEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    rcpp_result_gen = Rcpp::wrap(edgedist1(e, f, maxedist, bound));
    return rcpp_result_gen;
END_RCPP
}
// compute_pers_values
NumericVector compute_pers_values(int i, int nn, IntegerVector pers_to_obj, IntegerVector obj_to_pers, double maxcost, NumericMatrix dmat, NumericMatrix sigma, NumericMatrix tau, NumericVector prices, double maxedist, double multe, bool bound, double vfac, double efac);
RcppExport SEXP _graphmetrics_compute_pers_values(SEXP iSEXP, SEXP nnSEXP, SEXP pers_to_objSEXP, SEXP obj_to_persSEXP, SEXP maxcostSEXP, SEXP dmatSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP pricesSEXP, SEXP maxedistSEXP, SEXP multeSEXP, SEXP boundSEXP, SEXP vfacSEXP, SEXP efacSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pers_to_obj(pers_to_objSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obj_to_pers(obj_to_persSEXP);
    Rcpp::traits::input_parameter< double >::type maxcost(maxcostSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prices(pricesSEXP);
    Rcpp::traits::input_parameter< double >::type maxedist(maxedistSEXP);
    Rcpp::traits::input_parameter< double >::type multe(multeSEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< double >::type vfac(vfacSEXP);
    Rcpp::traits::input_parameter< double >::type efac(efacSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pers_values(i, nn, pers_to_obj, obj_to_pers, maxcost, dmat, sigma, tau, prices, maxedist, multe, bound, vfac, efac));
    return rcpp_result_gen;
END_RCPP
}
// compute_pers_values2
NumericVector compute_pers_values2(int i, int nn, IntegerVector pers_to_obj, IntegerVector obj_to_pers, double maxcost, NumericMatrix dmat, NumericMatrix sigma, NumericMatrix tau, NumericVector prices, double maxedist, double multe, bool bound, double vfac, double efac);
RcppExport SEXP _graphmetrics_compute_pers_values2(SEXP iSEXP, SEXP nnSEXP, SEXP pers_to_objSEXP, SEXP obj_to_persSEXP, SEXP maxcostSEXP, SEXP dmatSEXP, SEXP sigmaSEXP, SEXP tauSEXP, SEXP pricesSEXP, SEXP maxedistSEXP, SEXP multeSEXP, SEXP boundSEXP, SEXP vfacSEXP, SEXP efacSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type i(iSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type pers_to_obj(pers_to_objSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type obj_to_pers(obj_to_persSEXP);
    Rcpp::traits::input_parameter< double >::type maxcost(maxcostSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type prices(pricesSEXP);
    Rcpp::traits::input_parameter< double >::type maxedist(maxedistSEXP);
    Rcpp::traits::input_parameter< double >::type multe(multeSEXP);
    Rcpp::traits::input_parameter< bool >::type bound(boundSEXP);
    Rcpp::traits::input_parameter< double >::type vfac(vfacSEXP);
    Rcpp::traits::input_parameter< double >::type efac(efacSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_pers_values2(i, nn, pers_to_obj, obj_to_pers, maxcost, dmat, sigma, tau, prices, maxedist, multe, bound, vfac, efac));
    return rcpp_result_gen;
END_RCPP
}
// auction_match_Cpp
List auction_match_Cpp(NumericMatrix sigma, NumericMatrix tau, NumericMatrix dmat, int nn, double maxcost, bool compensate, int numtype, double CE, int stop_at, int maxiter, double eps, int verbose);
RcppExport SEXP _graphmetrics_auction_match_Cpp(SEXP sigmaSEXP, SEXP tauSEXP, SEXP dmatSEXP, SEXP nnSEXP, SEXP maxcostSEXP, SEXP compensateSEXP, SEXP numtypeSEXP, SEXP CESEXP, SEXP stop_atSEXP, SEXP maxiterSEXP, SEXP epsSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type nn(nnSEXP);
    Rcpp::traits::input_parameter< double >::type maxcost(maxcostSEXP);
    Rcpp::traits::input_parameter< bool >::type compensate(compensateSEXP);
    Rcpp::traits::input_parameter< int >::type numtype(numtypeSEXP);
    Rcpp::traits::input_parameter< double >::type CE(CESEXP);
    Rcpp::traits::input_parameter< int >::type stop_at(stop_atSEXP);
    Rcpp::traits::input_parameter< int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(auction_match_Cpp(sigma, tau, dmat, nn, maxcost, compensate, numtype, CE, stop_at, maxiter, eps, verbose));
    return rcpp_result_gen;
END_RCPP
}
// msm_levene_Cpp
List msm_levene_Cpp(NumericMatrix dmat, int n1, int n2, bool balanced, int nperm, double alpha);
RcppExport SEXP _graphmetrics_msm_levene_Cpp(SEXP dmatSEXP, SEXP n1SEXP, SEXP n2SEXP, SEXP balancedSEXP, SEXP npermSEXP, SEXP alphaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type dmat(dmatSEXP);
    Rcpp::traits::input_parameter< int >::type n1(n1SEXP);
    Rcpp::traits::input_parameter< int >::type n2(n2SEXP);
    Rcpp::traits::input_parameter< bool >::type balanced(balancedSEXP);
    Rcpp::traits::input_parameter< int >::type nperm(npermSEXP);
    Rcpp::traits::input_parameter< double >::type alpha(alphaSEXP);
    rcpp_result_gen = Rcpp::wrap(msm_levene_Cpp(dmat, n1, n2, balanced, nperm, alpha));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_graphmetrics_crossdist2", (DL_FUNC) &_graphmetrics_crossdist2, 2},
    {"_graphmetrics_crossdist", (DL_FUNC) &_graphmetrics_crossdist, 2},
    {"_graphmetrics_edgedist", (DL_FUNC) &_graphmetrics_edgedist, 5},
    {"_graphmetrics_edgedist1", (DL_FUNC) &_graphmetrics_edgedist1, 4},
    {"_graphmetrics_compute_pers_values", (DL_FUNC) &_graphmetrics_compute_pers_values, 14},
    {"_graphmetrics_compute_pers_values2", (DL_FUNC) &_graphmetrics_compute_pers_values2, 14},
    {"_graphmetrics_auction_match_Cpp", (DL_FUNC) &_graphmetrics_auction_match_Cpp, 12},
    {"_graphmetrics_msm_levene_Cpp", (DL_FUNC) &_graphmetrics_msm_levene_Cpp, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_graphmetrics(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
