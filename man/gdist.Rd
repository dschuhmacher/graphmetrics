% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distcomp_iGraphMatch.R
\name{gdist}
\alias{gdist}
\alias{gmspat}
\title{Compute distance between two graphs}
\usage{
gdist(
  g1,
  g2,
  method = naive_match,
  type = c("OSPA1", "OSPA2", "TT"),
  CV = 1,
  CE = 1,
  vpen = 1,
  start_help = 0,
  compensate = TRUE,
  stop_at = 1,
  maxiter = 100,
  lang = c("Cpp", "R"),
  eps = 0.01,
  verbose = 0
)

gmspat(
  g1,
  g2,
  method = naive_match,
  type = c("OSPA1", "OSPA2", "TT"),
  CV = 1,
  CE = 1,
  vpen = 1,
  start_help = 0,
  compensate = TRUE,
  stop_at = 1,
  maxiter = 100,
  lang = c("Cpp", "R"),
  eps = 0.01,
  verbose = 0
)
}
\arguments{
\item{g1}{An \code{igraph} object.}

\item{g2}{An \code{igraph} object.}

\item{method}{A function used for matching vertices. This function determines which (exact
or heuristic algorithm) is used for computing the distance.  One of  \code{naive_match},
\code{cplex_match}, \code{faq_match} and \code{auction_match}. See details.}

\item{type}{One of \code{"OSPA1"}, \code{"OSPA2"} and \code{"TT"} determining the variant of the distance
used. See details.}

\item{CV}{An upper bound for the vertex distance in the OSPA distances. Default is \code{CV = 1}.}

\item{CE}{An upper bound for the edge distance in the OSPA distances. Default is \code{CE = 1}.}

\item{vpen}{A penalty for adding auxiliary vertices in the TT distance. Default is \code{vpen = 1}.}

\item{start_help}{Value in \verb{[0,1]}. Determines to what extent the solution of the linear vertex matching
problem (ignoring the edges) influences the starting solution. Only relevant for method \code{faq_match}.}

\item{compensate}{Logical. Whether the computation of the value of a new assignments
for \code{auction_match} considers the influence of this new assignment to other
bidders and objects. Only relevant for method \code{auction_match}.}

\item{stop_at}{Maximal number of full assignments to be reached. One of several stopping criteria
for \code{auction_match}.}

\item{maxiter}{Maximal number of iterations to be reached. One of several stopping criteria
for \code{auction_match}.}

\item{lang}{One of \code{"Cpp"} and \code{"R"}. Specifies whether the C++ or R implementation is called.
The C++-implementation is usually much faster. Only relevant for method \code{auction_match}.}

\item{eps}{Small constant that is added to differences of personal values in the auction algorithm.
Only relevant for method \code{auction_match}.}

\item{verbose}{Numerical. How much information on intermediate results should be printed.
Larger means more. Defaults to \code{verbose = 0} (print nothing).}
}
\value{
A list with components \code{dist} and \code{perm}, where \code{dist} is the graph distance corresponding
to the determined (near) optimal permutation \code{perm}.
}
\description{
Run an exact or heuristic algorithm to compute one of several assignment-based graph metrics
(a.k.a. GTT and GOSPA metrics) and its underlying vertex assignment. Based on \href{https://arxiv.org/abs/2308.12165}{Schuhmacher and Wirth (2023)}.\cr
\code{gmspat} is an alias for \code{gdist}.
}
\details{
\code{gdist} expands the two graphs \code{g1} and \code{g2} of size \code{m} and \code{n} to graphs of the
same size in a way that depends on \code{type}:\cr
If \code{type} is \code{"TT"}, the graphs are filled up to a size \code{m+n} using auxiliary vertices,
that are not connected to any other vertex. Adding an auxiliary vertex incurs cost \code{vpen}.\cr
If \code{type} is \code{"OSPA1"}, the graphs are filled up to a size \eqn{\max(m,n)}
using auxiliary vertices that are connected by auxiliary edges.\cr
If \code{type} is \code{"OSPA2"}, the graphs are filled up to a size \eqn{\max(m,n)}
using auxiliary vertices that are not connected to any other vertex.

Under the hood, the information about the vertex and edge structure of the extended graphs is treated separately:
Euclidean distances between the vertex attributes of the two \code{igraph}s are passed as argument \code{dmat} to the \code{method}
function. The \code{igraph}s themselves are then stripped of their vertex attributes and passed to \link[iGraphMatch:gm]{iGraphMatch::gm} as
its main arguments together with the function specified by \code{method}.

Available functions are \link{naive_match}, \link{cplex_match}, \link{faq_match} and \link{auction_match}. The first two solve the
optimization problem underlying the chosen graph metric \code{type} exactly. If the CPLEX solver is available on the
user's system and the R package \code{ROI.plugin.cplex} has been installed, it is advisable to use \link{cplex_match}, as it
is usually much faster. It is overall still very slow and, depending on the example, may take a long time to return
even for relatively small graphs of only about 15 vertices. \link{faq_match} and \link{auction_match} provide faster heuristics.
We recommend \link{auction_match} for medium sized graphs (10-30 vertices) and \link{faq_match} for larger graphs.

The starting solution for \code{faq_match} in the set of doubly stochastic matrices is computed as the convex combination of
the optimal solution \code{P_V} of the linear vertex matching problem (ignoring the edges) and the barycenter matrix,
which has each entry set to \eqn{1/n} (assuming we have \eqn{n \times n} matrices), corresponding to \code{start = "bari"} in \link{faq_match} and
\link[iGraphMatch:gm_fw]{iGraphMatch::graph_match_indefinite} (which is what \code{faq_match} uses underneath).
More precisely, the starting solution is \code{start_help * P_V + (1- start_help) * bari}.

The function \link[iGraphMatch:gm]{iGraphMatch::gm} returns an \link[iGraphMatch:graphMatch_constructor]{iGraphMatch::graphMatch} object that is transformed
into a permutation. Additionally the distance/cost of this permutation is calculated using the
function \link{compdist}.
}
\examples{
set.seed(230820)
g1 <- rspatER(n=5, p=0.4)
plot(g1, rescale=FALSE, asp=1, xlim=c(0,1), ylim=c(0,1), 
     vertex.color="orange2", vertex.size=7, edge.color="orange2", edge.width=2)
g2 <- rspatER(n=4, p=0.5)
plot(g2, add=TRUE, rescale=FALSE, vertex.color="lightblue", vertex.size=5,
     edge.color="lightblue", edge.width=2)
gdist(g1, g2, method = naive_match, type="OSPA2")
if (requireNamespace("ROI.plugin.cplex", quietly = TRUE)) {
  gdist(g1, g2, method = cplex_match, type="OSPA2")
}
gdist(g1, g2, method = faq_match, type="OSPA2")
gdist(g1, g2, method = auction_match, type="OSPA2")

}
\references{
Dominic Schuhmacher and Leoni Carla Wirth (2023).
Assignment Based Metrics for Attributed Graphs.
\emph{ArXiv preprint}, \doi{10.48550/arXiv.2308.12165}
}
