% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/distcomp_independent.R
\name{compdist}
\alias{compdist}
\title{Compute OSPA- and TT-like Metrics Between Two Graphs}
\usage{
compdist(
  xi,
  sigma,
  eta,
  tau,
  g1 = NULL,
  g2 = NULL,
  permlist = NULL,
  type = c("OSPA1", "OSPA2", "TT"),
  edge_weighted = FALSE,
  CV = 1,
  CE = 1,
  vpen = 1
)
}
\arguments{
\item{xi, eta}{two-column matrices. The vertex sets of the two graphs.}

\item{sigma, tau}{square matrices. The adjacency matrices for the graphs, of size
n x n if the graph has n vertices.}

\item{g1, g2}{objects of class \code{igraph} generated with \code{\link{spatgraph}}.
Alternative format for passing the graphs (if \code{g1} is specified, \code{xi} and \code{sigma}
are ignored; if \code{g2} is specified, \code{eta} and \code{tau} are ignored).}

\item{permlist}{a list of permutations. The search for the best match to compute the distance
is restricted to this set. \code{permlist=NULL} means no restriction.}

\item{type}{one of "OSPA1", "OSPA2" and "TT".}

\item{edge_weighted}{Logical. Whether the graphs have edge_weights. Default is \code{edge_weighted = FALSE}.}

\item{CV, CE}{cut-off for distances between vertices and edges, respectively. Only relevant for OSPA types.}

\item{vpen}{penalty for additional vertices (plus their incident vertices) in the TT metric.}
}
\value{
A list with components \code{dist} and \code{perm} specifying the desired distance and the
(optimal) permutation on which it is based.
}
\description{
The graphs are assumed to be simple (no loops, undirected, no multiple edges) and without
weights, but may have different number of vertices.
}
\details{
This function computes metrics between two graphs that are based on a best match of their vertices.
The type argument specifies what we mean by a best match. ...

All of these optimization problems may be seen as binary quadratic programming problems, which are hard to
solve. The present function performs an exhaustive search, which is very slow. It may serve for very small
graphs (\eqn{\leq} 10 points) and to verify the results of heuristic algorithms.

The parameter \code{permlist} allows to restrict the search to a subset of permutations. For two graphs with
m and n nodes, each permutation has to be specified as a vector of length \code{max(m,n)} of numbers from
1 to \code{max(m,n)} for the OSPA-type metrics and a vector of length \code{m+n} of numbers from
1 to \code{m+n} for the TT-type metric. These numbers give the images of the vertex numbers of the first graph
in terms of vertex numbers of the second graph, where both graphs have been filled up with dummy points
to create "virtual matches" for unmatched points.

\code{permlist} may be just a single one of these vectors, which is interpreted as a list of length 1.
This is currently the main use of \code{permlist}: computing the metric if the optimal matching is
already (heuristically) known, e.g. from \code{\link[iGraphMatch]{gm}}. Future uses might be e.g.
algorithms of the form: first find best match of vertices ignoring edges and then check locally
for improvements, restricting e.g. the number of transpositions applied from the original matching)
}
\examples{
g1 <- rspatER(n=5, p=0.4)
plot(g1, rescale=FALSE, asp=1, xlim=c(0,1), ylim=c(0,1), 
     vertex.color="orange2", vertex.size=7, edge.color="orange2", edge.width=2)
g2 <- rperturb(g1, scatter=0.05, flip=0.2)
plot(g2, add=TRUE, rescale=FALSE, vertex.color="lightblue", vertex.size=5,
     edge.color="lightblue", edge.width=2)
compdist(g1=g1, g2=g2, type="OSPA1", CV=1, CE=1)
}
